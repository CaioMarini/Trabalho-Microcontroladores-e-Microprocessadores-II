
TrabalhoExame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000004a6  0000053a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800128  00800128  00000562  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000562  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f31  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000758  00000000  00000000  00001565  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058b  00000000  00000000  00001cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00002248  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045f  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000072c  00000000  00000000  0000277f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002eab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e2       	ldi	r26, 0x28	; 40
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 32       	cpi	r26, 0x2A	; 42
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 33 02 	call	0x466	; 0x466 <main>
  9e:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_command>:
	data_value1 = ((data_value << 4) & 0xF0); //Desloca 4 bits e mascara
	lcd_data(data_value1); // Envia para o LCD
}

void lcd_command(unsigned char cmd) {
	ctrl = cmd;
  a6:	8b b9       	out	0x0b, r24	; 11
	ctrl &= ~(1 << rs); // RS = 0, para comando
  a8:	58 98       	cbi	0x0b, 0	; 11
	ctrl &= ~(1 << rw); // RW = 0, para escrever no LCD
  aa:	59 98       	cbi	0x0b, 1	; 11
	ctrl |= (1 << en);  // EN = 1, passndo de alto para baixo
  ac:	5a 9a       	sbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	8f e9       	ldi	r24, 0x9F	; 159
  b0:	9f e0       	ldi	r25, 0x0F	; 15
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcd_command+0xc>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <lcd_command+0x12>
  b8:	00 00       	nop
	_delay_ms(1);
	ctrl &= ~(1 << en); // EN = 0, passando de alto para baixo
  ba:	5a 98       	cbi	0x0b, 2	; 11
  bc:	9f ef       	ldi	r25, 0xFF	; 255
  be:	23 ef       	ldi	r18, 0xF3	; 243
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	91 50       	subi	r25, 0x01	; 1
  c4:	20 40       	sbci	r18, 0x00	; 0
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <lcd_command+0x1c>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <lcd_command+0x26>
  cc:	00 00       	nop
  ce:	08 95       	ret

000000d0 <lcdCommand>:
	lcdCommand(0x80); // Inicia na posição inicial
	_delay_ms(1);
	return;
}

void lcdCommand(char cmd_value) {
  d0:	cf 93       	push	r28
  d2:	c8 2f       	mov	r28, r24
	char cmd_value1;
	cmd_value1 = cmd_value & 0xF0;//Mascara os 4 bits inferiores porque PD4 a PD7 são usadas
	lcd_command(cmd_value1);//Envia o texto para o LCD
  d4:	80 7f       	andi	r24, 0xF0	; 240
  d6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	cmd_value1 = ((cmd_value << 4) & 0xF0); // Desloca 4 bits e mascara
	lcd_command(cmd_value1);// Envia  o texto para o LCD
  da:	8c 2f       	mov	r24, r28
  dc:	82 95       	swap	r24
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
}
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <lcd_gotoxy>:
		caracQuant = 0;
	}
}

// Função para avançar a posição no display
void lcd_gotoxy(unsigned char x, unsigned char y) {
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	00 d0       	rcall	.+0      	; 0xee <lcd_gotoxy+0x6>
  ee:	00 d0       	rcall	.+0      	; 0xf0 <lcd_gotoxy+0x8>
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
  f4:	90 e8       	ldi	r25, 0x80	; 128
  f6:	99 83       	std	Y+1, r25	; 0x01
  f8:	90 ec       	ldi	r25, 0xC0	; 192
  fa:	9a 83       	std	Y+2, r25	; 0x02
  fc:	94 e9       	ldi	r25, 0x94	; 148
  fe:	9b 83       	std	Y+3, r25	; 0x03
 100:	94 ed       	ldi	r25, 0xD4	; 212
 102:	9c 83       	std	Y+4, r25	; 0x04
	lcdCommand(firstCharAdr[y - 1] + x - 1);
 104:	fe 01       	movw	r30, r28
 106:	e6 0f       	add	r30, r22
 108:	f1 1d       	adc	r31, r1
 10a:	81 50       	subi	r24, 0x01	; 1
 10c:	90 81       	ld	r25, Z
 10e:	89 0f       	add	r24, r25
 110:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdCommand>
 114:	8f e8       	ldi	r24, 0x8F	; 143
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_gotoxy+0x30>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_gotoxy+0x36>
 11e:	00 00       	nop
	_delay_ms(0.1);
}
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <lcd_init>:

void lcd_init(void) {
	lcdCommand(0x02); // inicializa o LCD no modo 4 bits
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdCommand>
 134:	8f e9       	ldi	r24, 0x9F	; 159
 136:	9f e0       	ldi	r25, 0x0F	; 15
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_init+0xa>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_init+0x10>
 13e:	00 00       	nop
	_delay_ms(1);
	lcdCommand(0x28); // inicializa o LCD em 2 linhas, 5X7 na matriz de 4 bits
 140:	88 e2       	ldi	r24, 0x28	; 40
 142:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdCommand>
 146:	8f e9       	ldi	r24, 0x9F	; 159
 148:	9f e0       	ldi	r25, 0x0F	; 15
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_init+0x1c>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <lcd_init+0x22>
 150:	00 00       	nop
	_delay_ms(1);
	lcdCommand(0x01); // Limpa o LCD
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdCommand>
 158:	8f e9       	ldi	r24, 0x9F	; 159
 15a:	9f e0       	ldi	r25, 0x0F	; 15
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_init+0x2e>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_init+0x34>
 162:	00 00       	nop
	_delay_ms(1);
	lcdCommand(0x0E); // Liga o curso
 164:	8e e0       	ldi	r24, 0x0E	; 14
 166:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdCommand>
 16a:	8f e9       	ldi	r24, 0x9F	; 159
 16c:	9f e0       	ldi	r25, 0x0F	; 15
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_init+0x40>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcd_init+0x46>
 174:	00 00       	nop
	_delay_ms(1);
	lcdCommand(0x80); // Inicia na posição inicial
 176:	80 e8       	ldi	r24, 0x80	; 128
 178:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdCommand>
 17c:	8f e9       	ldi	r24, 0x9F	; 159
 17e:	9f e0       	ldi	r25, 0x0F	; 15
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_init+0x52>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_init+0x58>
 186:	00 00       	nop
 188:	08 95       	ret

0000018a <lcd_data>:
	_delay_ms(40);
	return;
}

void lcd_data(unsigned char data) {
	ctrl = data;
 18a:	8b b9       	out	0x0b, r24	; 11
	ctrl |= (1 << rs);  // RS = 1, dados
 18c:	58 9a       	sbi	0x0b, 0	; 11
	ctrl &= ~(1 << rw); // RW = 0, escrever
 18e:	59 98       	cbi	0x0b, 1	; 11
	ctrl |= (1 << en);  // EN = 1, passando de alto para baixo
 190:	5a 9a       	sbi	0x0b, 2	; 11
 192:	8f e9       	ldi	r24, 0x9F	; 159
 194:	9f e0       	ldi	r25, 0x0F	; 15
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_data+0xc>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_data+0x12>
 19c:	00 00       	nop
	_delay_ms(1);
	ctrl &= ~(1 << en); // EN = 0, passando de alto para baixo
 19e:	5a 98       	cbi	0x0b, 2	; 11
 1a0:	9f ef       	ldi	r25, 0xFF	; 255
 1a2:	23 ef       	ldi	r18, 0xF3	; 243
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	91 50       	subi	r25, 0x01	; 1
 1a8:	20 40       	sbci	r18, 0x00	; 0
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <lcd_data+0x1c>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_data+0x26>
 1b0:	00 00       	nop
 1b2:	08 95       	ret

000001b4 <lcdData>:
	lcd_command(cmd_value1);//Envia o texto para o LCD
	cmd_value1 = ((cmd_value << 4) & 0xF0); // Desloca 4 bits e mascara
	lcd_command(cmd_value1);// Envia  o texto para o LCD
}

void lcdData(char data_value) {
 1b4:	cf 93       	push	r28
 1b6:	c8 2f       	mov	r28, r24
	char data_value1;
	data_value1 = data_value & 0xF0;//Mascara os 4 bits porque PD4 a PD7 são usadas
	lcd_data(data_value1);
 1b8:	80 7f       	andi	r24, 0xF0	; 240
 1ba:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_data>
	data_value1 = ((data_value << 4) & 0xF0); //Desloca 4 bits e mascara
	lcd_data(data_value1); // Envia para o LCD
 1be:	8c 2f       	mov	r24, r28
 1c0:	82 95       	swap	r24
 1c2:	80 7f       	andi	r24, 0xF0	; 240
 1c4:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_data>
}
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <lcd_print>:
	_delay_ms(40);
	return;
}

void lcd_print(
unsigned char *str) { // armazena o endereço da string Str
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24
	int i = 0;
	while (str[i] !=
 1d2:	88 81       	ld	r24, Y
 1d4:	88 23       	and	r24, r24
 1d6:	31 f0       	breq	.+12     	; 0x1e4 <lcd_print+0x18>
 1d8:	21 96       	adiw	r28, 0x01	; 1
	'\0') {     // fica em loop até encontrar o fim da string
		lcdData(str[i]); // envia para o LCD byte a byte
 1da:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcdData>
}

void lcd_print(
unsigned char *str) { // armazena o endereço da string Str
	int i = 0;
	while (str[i] !=
 1de:	89 91       	ld	r24, Y+
 1e0:	81 11       	cpse	r24, r1
 1e2:	fb cf       	rjmp	.-10     	; 0x1da <lcd_print+0xe>
	'\0') {     // fica em loop até encontrar o fim da string
		lcdData(str[i]); // envia para o LCD byte a byte
		i++;
	}
	return;
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <keypadScan>:
	};

	return 0;
}

void keypadScan(){
 1ea:	cf 93       	push	r28
	
	// Variavel para armazenar a coluna
	uint8_t keyPressCodeC = keypadPortValueC;
 1ec:	26 b1       	in	r18, 0x06	; 6
	
	keypadDirectionRegisterC ^= (1<<0) | (1<<1) | (1<<2) | (1<<3);
 1ee:	97 b1       	in	r25, 0x07	; 7
 1f0:	8f e0       	ldi	r24, 0x0F	; 15
 1f2:	98 27       	eor	r25, r24
 1f4:	97 b9       	out	0x07, r25	; 7
	keypadDirectionRegisterR ^= (1<<0) | (1<<1) | (1<<2) | (1<<3);
 1f6:	94 b1       	in	r25, 0x04	; 4
 1f8:	98 27       	eor	r25, r24
 1fa:	94 b9       	out	0x04, r25	; 4
	
	keypadPortControlC ^= (1<<0) | (1<<1) | (1<<2) | (1<<3);
 1fc:	98 b1       	in	r25, 0x08	; 8
 1fe:	98 27       	eor	r25, r24
 200:	98 b9       	out	0x08, r25	; 8
	keypadPortControlR ^= (1<<0) | (1<<1) | (1<<2) | (1<<3);
 202:	95 b1       	in	r25, 0x05	; 5
 204:	89 27       	eor	r24, r25
 206:	85 b9       	out	0x05, r24	; 5
 208:	8f e1       	ldi	r24, 0x1F	; 31
 20a:	9e e4       	ldi	r25, 0x4E	; 78
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <keypadScan+0x22>
 210:	00 c0       	rjmp	.+0      	; 0x212 <keypadScan+0x28>
 212:	00 00       	nop
	
	_delay_ms(5);
	
	// Variavel para armazenar a linha
	int temp = keypadPortValueR;
 214:	c3 b1       	in	r28, 0x03	; 3
	uint8_t keyPressCodeR = temp << 4;
	
	// Contador para a linha e coluna
	uint8_t keyPressCode = keyPressCodeC | keyPressCodeR;
 216:	c2 95       	swap	r28
 218:	c0 7f       	andi	r28, 0xF0	; 240
 21a:	c2 2b       	or	r28, r18
	
	
	// Coluna 1
	
	
	if(keyPressCode == 0b11101110){
 21c:	ce 3e       	cpi	r28, 0xEE	; 238
 21e:	71 f4       	brne	.+28     	; 0x23c <keypadScan+0x52>
		lcd_print("1");
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		caracQuant++;
 228:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 22c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 236:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 23a:	20 c0       	rjmp	.+64     	; 0x27c <keypadScan+0x92>
		
	}
	if(keyPressCode == 0b11011110){
 23c:	ce 3d       	cpi	r28, 0xDE	; 222
 23e:	71 f4       	brne	.+28     	; 0x25c <keypadScan+0x72>
		lcd_print("4");
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		caracQuant++;
 248:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 24c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 256:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 25a:	20 c0       	rjmp	.+64     	; 0x29c <keypadScan+0xb2>
	}
	if(keyPressCode == 0b10111110){
 25c:	ce 3b       	cpi	r28, 0xBE	; 190
 25e:	71 f4       	brne	.+28     	; 0x27c <keypadScan+0x92>
		lcd_print("7");
 260:	84 e0       	ldi	r24, 0x04	; 4
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		caracQuant++;
 268:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 26c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 276:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 27a:	20 c0       	rjmp	.+64     	; 0x2bc <keypadScan+0xd2>
	}
	if(keyPressCode == 0b01111110){
 27c:	ce 37       	cpi	r28, 0x7E	; 126
 27e:	71 f4       	brne	.+28     	; 0x29c <keypadScan+0xb2>
		lcd_print("*");
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		caracQuant++;
 288:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 28c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 296:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 29a:	20 c0       	rjmp	.+64     	; 0x2dc <keypadScan+0xf2>
	}
	
	// Coluna 2
	if(keyPressCode == 0b11101101){
 29c:	cd 3e       	cpi	r28, 0xED	; 237
 29e:	71 f4       	brne	.+28     	; 0x2bc <keypadScan+0xd2>
		lcd_print("2");
 2a0:	88 e0       	ldi	r24, 0x08	; 8
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		caracQuant++;
 2a8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 2ac:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 2b6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 2ba:	20 c0       	rjmp	.+64     	; 0x2fc <keypadScan+0x112>
	}
	if(keyPressCode == 0b11011101){
 2bc:	cd 3d       	cpi	r28, 0xDD	; 221
 2be:	71 f4       	brne	.+28     	; 0x2dc <keypadScan+0xf2>
		lcd_print("5");
 2c0:	8a e0       	ldi	r24, 0x0A	; 10
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		caracQuant++;
 2c8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 2cc:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 2d6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 2da:	20 c0       	rjmp	.+64     	; 0x31c <keypadScan+0x132>
	}
	if(keyPressCode == 0b10111101){
 2dc:	cd 3b       	cpi	r28, 0xBD	; 189
 2de:	71 f4       	brne	.+28     	; 0x2fc <keypadScan+0x112>
		lcd_print("8");
 2e0:	8c e0       	ldi	r24, 0x0C	; 12
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		caracQuant++;
 2e8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 2ec:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 2f6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 2fa:	20 c0       	rjmp	.+64     	; 0x33c <keypadScan+0x152>
	}
	if(keyPressCode == 0b01111101){
 2fc:	cd 37       	cpi	r28, 0x7D	; 125
 2fe:	71 f4       	brne	.+28     	; 0x31c <keypadScan+0x132>
		lcd_print("0");
 300:	8e e0       	ldi	r24, 0x0E	; 14
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		caracQuant++;
 308:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 30c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 316:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 31a:	20 c0       	rjmp	.+64     	; 0x35c <keypadScan+0x172>
	}
	
	// Coluna 3
	if(keyPressCode == 0b11101011){
 31c:	cb 3e       	cpi	r28, 0xEB	; 235
 31e:	71 f4       	brne	.+28     	; 0x33c <keypadScan+0x152>
		lcd_print("3");
 320:	80 e1       	ldi	r24, 0x10	; 16
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		caracQuant++;
 328:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 32c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 336:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 33a:	20 c0       	rjmp	.+64     	; 0x37c <keypadScan+0x192>
	}
	if(keyPressCode == 0b11011011){
 33c:	cb 3d       	cpi	r28, 0xDB	; 219
 33e:	71 f4       	brne	.+28     	; 0x35c <keypadScan+0x172>
		lcd_print("6");
 340:	82 e1       	ldi	r24, 0x12	; 18
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		caracQuant++;
 348:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 34c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 356:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 35a:	20 c0       	rjmp	.+64     	; 0x39c <keypadScan+0x1b2>
	}
	if(keyPressCode == 0b10111011){
 35c:	cb 3b       	cpi	r28, 0xBB	; 187
 35e:	71 f4       	brne	.+28     	; 0x37c <keypadScan+0x192>
		lcd_print("9");;
 360:	84 e1       	ldi	r24, 0x14	; 20
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		caracQuant++;
 368:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 36c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 376:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 37a:	20 c0       	rjmp	.+64     	; 0x3bc <keypadScan+0x1d2>
	}
	if(keyPressCode == 0b01111011){
 37c:	cb 37       	cpi	r28, 0x7B	; 123
 37e:	71 f4       	brne	.+28     	; 0x39c <keypadScan+0x1b2>
		lcd_print("=");
 380:	86 e1       	ldi	r24, 0x16	; 22
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		caracQuant++;
 388:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 38c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 390:	01 96       	adiw	r24, 0x01	; 1
 392:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 396:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 39a:	20 c0       	rjmp	.+64     	; 0x3dc <keypadScan+0x1f2>
	}
	
	// Coluna 4
	if(keyPressCode == 0b11100111){
 39c:	c7 3e       	cpi	r28, 0xE7	; 231
 39e:	71 f4       	brne	.+28     	; 0x3bc <keypadScan+0x1d2>
		lcd_print("A");
 3a0:	88 e1       	ldi	r24, 0x18	; 24
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		caracQuant++;
 3a8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 3ac:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 3b6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 3ba:	20 c0       	rjmp	.+64     	; 0x3fc <keypadScan+0x212>
	}
	if(keyPressCode == 0b11010111){
 3bc:	c7 3d       	cpi	r28, 0xD7	; 215
 3be:	71 f4       	brne	.+28     	; 0x3dc <keypadScan+0x1f2>
		lcd_print("B");
 3c0:	8a e1       	ldi	r24, 0x1A	; 26
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		caracQuant++;
 3c8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 3cc:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 3d6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 3da:	1f c0       	rjmp	.+62     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	}
	if(keyPressCode == 0b10110111){
 3dc:	c7 3b       	cpi	r28, 0xB7	; 183
 3de:	71 f4       	brne	.+28     	; 0x3fc <keypadScan+0x212>
		lcd_print("C");
 3e0:	8c e1       	ldi	r24, 0x1C	; 28
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		caracQuant++;
 3e8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 3ec:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 3f6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 3fa:	0f c0       	rjmp	.+30     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	}
	if(keyPressCode == 0b01110111){
 3fc:	c7 37       	cpi	r28, 0x77	; 119
 3fe:	69 f4       	brne	.+26     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		lcd_print("D");
 400:	8e e1       	ldi	r24, 0x1E	; 30
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		caracQuant++;
 408:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 40c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 416:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
	}
	//se caracQuant for >= 16 o diplsy é limpo e começa a digitar novamente
	if (caracQuant >= 16)
 41a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 41e:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 422:	40 97       	sbiw	r24, 0x10	; 16
 424:	f4 f0       	brlt	.+60     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
	{
		lcdCommand(0x01); // Limpa o LCD
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdCommand>
 42c:	8f e9       	ldi	r24, 0x9F	; 159
 42e:	9f e0       	ldi	r25, 0x0F	; 15
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 436:	00 00       	nop
		_delay_ms(1);
		lcdCommand(0x80); // 8 go to first line and 0 is for 0th position
 438:	80 e8       	ldi	r24, 0x80	; 128
 43a:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdCommand>
 43e:	8f e9       	ldi	r24, 0x9F	; 159
 440:	9f e0       	ldi	r25, 0x0F	; 15
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 448:	00 00       	nop
		_delay_ms(1);
		lcd_print("Digite"); //Digita o texto
 44a:	80 e2       	ldi	r24, 0x20	; 32
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
		lcd_gotoxy(1, 2);
 452:	62 e0       	ldi	r22, 0x02	; 2
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_gotoxy>
		caracQuant = 0;
 45a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__data_end+0x1>
 45e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
	}
}
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <main>:
void keypadScan(void);
int caracQuant = 0;


int main() {
	DDRD = 0xFF; // Colocar por D como Saida
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	8a b9       	out	0x0a, r24	; 10
	lcd_init();  // Iniciar o LCD
 46a:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_init>
 46e:	8f e1       	ldi	r24, 0x1F	; 31
 470:	9e e4       	ldi	r25, 0x4E	; 78
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	f1 f7       	brne	.-4      	; 0x472 <main+0xc>
 476:	00 c0       	rjmp	.+0      	; 0x478 <main+0x12>
 478:	00 00       	nop
	_delay_ms(5);//Delay

	lcd_gotoxy(1, 1);         // Ir para posição 1,1 do LCD
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_gotoxy>
	lcd_print("Digite"); // Mostra a mensagem
 482:	80 e2       	ldi	r24, 0x20	; 32
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_print>
	lcd_gotoxy(1, 2);         // Va para a posição 1,2 do LCD
 48a:	62 e0       	ldi	r22, 0x02	; 2
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_gotoxy>

	// inicialização do teclado
	keypadDirectionRegisterR = (1<<0) | (1<<1) | (1<<2) | (1<<3);
 492:	8f e0       	ldi	r24, 0x0F	; 15
 494:	84 b9       	out	0x04, r24	; 4
	keypadDirectionRegisterC = (0<<0) | (0<<1) | (0<<2) | (0<<3);
 496:	17 b8       	out	0x07, r1	; 7

	keypadPortControlR = (0<<0) | (0<<1) | (0<<2) | (0<<3);
 498:	15 b8       	out	0x05, r1	; 5
	keypadPortControlC = (1<<0) | (1<<1) | (1<<2) | (1<<3);
 49a:	88 b9       	out	0x08, r24	; 8
	
	while (1) {
		keypadScan();
 49c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <keypadScan>
 4a0:	fd cf       	rjmp	.-6      	; 0x49c <main+0x36>

000004a2 <_exit>:
 4a2:	f8 94       	cli

000004a4 <__stop_program>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__stop_program>
